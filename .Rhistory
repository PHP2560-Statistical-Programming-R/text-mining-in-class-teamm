knitr::opts_chunk$set(echo = TRUE)
library(RTextTools)
data("NYTimes")
NYTimes$Title = as.character(NYTimes$Title)
words = unnest_tokens(NYTimes, word, Title)
library(RTextTools)
library(tidytext)
data("NYTimes")
NYTimes$Title = as.character(NYTimes$Title)
words = unnest_tokens(NYTimes, word, Title)
words
head(words)
tail(words)
View(words)
library(RTextTools)
library(tidytext)
data("NYTimes")
NYTimes$Title = as.character(NYTimes$Title)
words = unnest_tokens(NYTimes, word, Title,to_lower=FALSE)
library(stringr)
caps_pattern = "^[^a-z]*$"
str_detect("HELLO",caps_pattern)
str_detect("HElLO",caps_pattern)
str_detect("12",caps_pattern)
str_detect("14",caps_pattern)
library(RTextTools)
library(tidytext)
library(stringr)
data("NYTimes")
NYTimes$Title = as.character(NYTimes$Title)
words = unnest_tokens(NYTimes, word, Title,to_lower=FALSE)
caps_pattern = "^[^a-z]*$"
words$caps <- str_detect(words$word,caps_pattern)
library(RTextTools)
library(tidytext)
library(stringr)
data("NYTimes")
NYTimes$Title = as.character(NYTimes$Title)
words = unnest_tokens(NYTimes, word, Title,to_lower=FALSE)
caps_pattern = "^[^a-z]*$"
words$caps <- str_detect(words$word,caps_pattern)
sents.nrc = inner_join(words, get_sentiments("nrc"), by="word")
library(RTextTools)
library(tidytext)
library(stringr)
library(dplyr)
data("NYTimes")
NYTimes$Title = as.character(NYTimes$Title)
words = unnest_tokens(NYTimes, word, Title,to_lower=FALSE)
caps_pattern = "^[^a-z]*$"
words$caps <- str_detect(words$word,caps_pattern)
sents.nrc = inner_join(words, get_sentiments("nrc"), by="word")
View(sents.nrc)
library(RTextTools)
library(tidytext)
library(stringr)
library(dplyr)
data("NYTimes")
NYTimes$Title = as.character(NYTimes$Title)
words = unnest_tokens(NYTimes, word, Title,to_lower=FALSE)
caps_pattern = "^[^a-z]*$"
words$caps <- str_detect(words$word,caps_pattern)
##Now change to lowercase for sentiment matches
words$word = str_to_lower(words$word)
sents.nrc = inner_join(words, get_sentiments("nrc"), by="word")
library(RTextTools)
library(tidytext)
library(stringr)
library(dplyr)
data("NYTimes")
NYTimes$Title = as.character(NYTimes$Title)
words = unnest_tokens(NYTimes, word, Title,to_lower=FALSE)
caps_pattern = "^[^a-z]*$"
words$caps <- str_detect(words$word,caps_pattern)
##Now change to lowercase for sentiment matches
words$word = str_to_lower(words$word)
sents.nrc = inner_join(words, get_sentiments("nrc"), by="word")
positives <- sents.nrc %>%
filter(sentiment=="positive")
library(RTextTools)
library(tidytext)
library(stringr)
library(dplyr)
data("NYTimes")
NYTimes$Title = as.character(NYTimes$Title)
words = unnest_tokens(NYTimes, word, Title,to_lower=FALSE)
caps_pattern = "^[^a-z]*$"
words$caps <- str_detect(words$word,caps_pattern)
##Now change to lowercase for sentiment matches
words$word = str_to_lower(words$word)
sents.nrc = inner_join(words, get_sentiments("nrc"), by="word")
positives <- sents.nrc %>%
filter(sentiment=="positive")
View(positives)
library(RTextTools)
library(tidytext)
library(stringr)
library(dplyr)
data("NYTimes")
NYTimes$Title = as.character(NYTimes$Title)
words = unnest_tokens(NYTimes, word, Title,to_lower=FALSE)
caps_pattern = "^[^a-z]*$"
words$caps <- str_detect(words$word,caps_pattern)
##Now change to lowercase for sentiment matches
words$word = str_to_lower(words$word)
sents.nrc = inner_join(words, get_sentiments("nrc"), by="word")
analyze <- sents.nrc %>%
group_by(caps,sentiment) %>%
summarize(freq=mean(freq))
#Now comparing analysis by case
analyze <- sents.nrc %>%
count(caps,sentiment,case_total) %>%
mutate(percent = n/case_total) %>%
filter(sentiment=="positive") %>%
library(RTextTools)
library(tidytext)
library(stringr)
library(dplyr)
data("NYTimes")
NYTimes$Title = as.character(NYTimes$Title)
words = unnest_tokens(NYTimes, word, Title,to_lower=FALSE)
caps_pattern = "^[^a-z]*$"
words$caps <- str_detect(words$word,caps_pattern)
##Now change to lowercase for sentiment matches
words$word = str_to_lower(words$word)
#Calculate total num of words in this case for later
words <- words %>%
group_by(caps) %>%
mutate(case_total=n()) %>%
ungroup()
sents.nrc = inner_join(words, get_sentiments("nrc"), by="word")
#Now comparing analysis by case
analyze <- sents.nrc %>%
count(caps,sentiment,case_total) %>%
mutate(percent = n/case_total) %>%
filter(sentiment=="positive")
View(analyze)
#Now comparing analysis by case
positives <- sents.nrc %>%
count(caps,sentiment,case_total) %>%
mutate(percent = n/case_total) %>%
filter(sentiment=="positive")
negatives <- sents.nrc %>%
count(caps,sentiment,case_total) %>%
mutate(percent = n/case_total) %>%
filter(sentiment=="negative")
View(negatives)
View(words)
View(sents.nrc)
library(RTextTools)
library(tidytext)
library(stringr)
library(dplyr)
data("NYTimes")
NYTimes$Title = as.character(NYTimes$Title)
words = unnest_tokens(NYTimes, word, Title,to_lower=FALSE)
caps_pattern = "^[^a-z]*$"
words$caps <- str_detect(words$word,caps_pattern)
#Calculate total num of words in this case for later
words <- words %>%
group_by(caps) %>%
mutate(case_total=n()) %>%
ungroup()
##Now change to lowercase for sentiment matches
words$word = str_to_lower(words$word)
sents.nrc = inner_join(words, get_sentiments("nrc"), by="word")
sents.nrc <- sents.nrc %>%
group_by(caps) %>%
mutate(case_total=n_distinct(word)) %>%
ungroup()
View(sents.nrc)
View(words)
#Now comparing analysis by case
positives <- sents.nrc %>%
count(caps,sentiment,case_total) %>%
mutate(percent = n/case_total) %>%
filter(sentiment=="positive")
negatives <- sents.nrc %>%
count(caps,sentiment,case_total) %>%
mutate(percent = n/case_total) %>%
filter(sentiment=="negative")
library(RTextTools)
library(tidytext)
library(stringr)
library(dplyr)
data("NYTimes")
NYTimes$Title = as.character(NYTimes$Title)
words = unnest_tokens(NYTimes, word, Title,to_lower=FALSE)
caps_pattern = "^[^a-z]*$"
words$caps <- str_detect(words$word,caps_pattern)
#Calculate total num of words in this case for later
words <- words %>%
group_by(caps) %>%
mutate(case_total=n()) %>%
ungroup()
##Now change to lowercase for sentiment matches
words$word = str_to_lower(words$word)
sents.nrc = inner_join(words, get_sentiments("nrc"), by="word")
#Now comparing analysis by case
positives <- sents.nrc %>%
count(caps,sentiment,case_total) %>%
mutate(percent = n/case_total) %>%
filter(sentiment=="positive")
negatives <- sents.nrc %>%
count(caps,sentiment,case_total) %>%
mutate(percent = n/case_total) %>%
filter(sentiment=="negative")
#visualize
sents.nrc %>%
filter(sentiment=="negative") %>%
count(word,caps) %>%
group_by(caps) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(paste(word, caps, sep = "__"), n)) %>%
# Set up the plot with aes()
ggplot(aes(x=word,y=n,fill=caps)) +
geom_col(show.legend = FALSE) +
scale_x_discrete(labels = function(x) gsub("__.+$", "", x)) +
facet_wrap(~ station, nrow = 2, scales = "free") +
coord_flip()
#visualize
library(ggplot2)
sents.nrc %>%
filter(sentiment=="negative") %>%
count(word,caps) %>%
group_by(caps) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(paste(word, caps, sep = "__"), n)) %>%
# Set up the plot with aes()
ggplot(aes(x=word,y=n,fill=caps)) +
geom_col(show.legend = FALSE) +
scale_x_discrete(labels = function(x) gsub("__.+$", "", x)) +
facet_wrap(~ station, nrow = 2, scales = "free") +
coord_flip()
#visualize
library(ggplot2)
sents.nrc %>%
filter(sentiment=="negative") %>%
count(word,caps) %>%
group_by(caps) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(paste(word, caps, sep = "__"), n)) %>%
# Set up the plot with aes()
ggplot(aes(x=word,y=n,fill=caps)) +
geom_col(show.legend = FALSE) +
scale_x_discrete(labels = function(x) gsub("__.+$", "", x)) +
facet_wrap(~ caps, nrow = 2, scales = "free") +
coord_flip()
View(words)
View(sents.nrc)
#visualize
library(ggplot2)
sents.nrc %>%
filter(sentiment=="negative") %>%
count(word,caps) %>%
group_by(caps) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(paste(word, caps, sep = "__"), n)) %>%
# Set up the plot with aes()
ggplot(aes(x=word,y=n,fill=caps)) +
geom_col(show.legend = FALSE) +
scale_x_discrete(labels = function(x) gsub("__.+$", "", x)) +
facet_wrap(~ caps, nrow = 2, scales = "free") +
coord_flip()
sents.nrc %>%
filter(sentiment=="positive") %>%
count(word,caps) %>%
group_by(caps) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(paste(word, caps, sep = "__"), n)) %>%
# Set up the plot with aes()
ggplot(aes(x=word,y=n,fill=caps)) +
geom_col(show.legend = FALSE) +
scale_x_discrete(labels = function(x) gsub("__.+$", "", x)) +
facet_wrap(~ caps, nrow = 2, scales = "free") +
coord_flip()
View(positives)
?t.test
?prop.test
table(1270,398)
positives$n_notpos <- positives$case_total-positives$n
positives
select(positives,n,n_notpos)
#Statistical analysis
positives$n_notpos <- positives$case_total-positives$n
positives
positives[,c(4,6)]
#Statistical analysis
positives$n_notpos <- positives$case_total-positives$n
prop_table <- positives[,c(4,6)]
prop.test(prop.table)
table(prop.table)
data.table(prop.table)
?as.table
as.table(prop.table)
matrix(prop.table)
as.data.frame(prop.table)
#Statistical analysis
positives$n_notpos <- positives$case_total-positives$n
prop_table <- positives[,c(4,6)]
#have to hard code to go from
prop.test(as.dta.frame(prop.table))
#Statistical analysis
positives$n_notpos <- positives$case_total-positives$n
prop_table <- positives[,c(4,6)]
#have to hard code to go from
prop.test(as.data.frame(prop.table))
?prop.test
prop.test(as.table(as.data.frame(prop.table)))
print(as.data.frame(prop.table))
prop.test(as.matrix(as.data.frame(prop.table)))
prop.table
head(prop.table)
#Statistical analysis
positives$n_notpos <- positives$case_total-positives$n
prop_table <- positives[,c(4,6)]
#have to hard code to go from tibble to table
prop.test(as.data.frame(prop.table))
View(prop_table)
prop_table$n_notpos
table(prop_table$n,prop_table$n_notpos)
table(prop_table$n[1],prop_table$n[2],prop_table$n_notpos[1],prop_table$n_notpos[2])
matrix(prop_table$n[1],prop_table$n[2],prop_table$n_notpos[1],prop_table$n_notpos[2])
matrix(prop_table$n[1],prop_table$n[2],prop_table$n_notpos[1],prop_table$n_notpos[2],ncol=2)
matrix(c(prop_table$n[1],prop_table$n[2],prop_table$n_notpos[1],prop_table$n_notpos[2]),ncol=2)
#Statistical analysis
positives$n_notpos <- positives$case_total-positives$n
prop_table <- positives[,c(4,6)]
prop_table <- matrix(c(prop_table$n[1],prop_table$n[2],prop_table$n_notpos[1],prop_table$n_notpos[2]),ncol=2)
#have to hard code to go from tibble to table
prop.test(prop_table)
View(positives)
#Statistical analysis
# We want to create a table for use in a prop.test
create_table <- function(tib) {
tib$n_not <- tib$case_total-tib$n
prop_table <- tib[,c(4,6)]
prop_table <- matrix(c(prop_table$n[1],prop_table$n[2],prop_table$n_not[1],prop_table$n_not[2]),ncol=2)
colnames(prop_table) <- c("pos","not pos")
rownames(prop_table) <- c("lower","upper")
return(prop_table)
}
prop.test(prop_table)
#Statistical analysis
# We want to create a table for use in a prop.test
create_table <- function(tib) {
tib$n_not <- tib$case_total-tib$n
prop_table <- tib[,c(4,6)]
prop_table <- matrix(c(prop_table$n[1],prop_table$n[2],prop_table$n_not[1],prop_table$n_not[2]),ncol=2)
rownames(prop_table) <- c("lower","upper")
return(prop_table)
}
#First for positives:
pos_table <- create_tables(positives)
#Statistical analysis
# We want to create a table for use in a prop.test
create_table <- function(tib) {
tib$n_not <- tib$case_total-tib$n
prop_table <- tib[,c(4,6)]
prop_table <- matrix(c(prop_table$n[1],prop_table$n[2],prop_table$n_not[1],prop_table$n_not[2]),ncol=2)
rownames(prop_table) <- c("lower","upper")
return(prop_table)
}
#First for positives:
pos_table <- create_table(positives)
#Now comparing analysis by case
positives <- sents.nrc %>%
count(caps,sentiment,case_total) %>%
mutate(percent = n/case_total) %>%
filter(sentiment=="positive")
negatives <- sents.nrc %>%
count(caps,sentiment,case_total) %>%
mutate(percent = n/case_total) %>%
filter(sentiment=="negative")
#Statistical analysis
# We want to create a table for use in a prop.test
create_table <- function(tib) {
tib$n_not <- tib$case_total-tib$n
prop_table <- tib[,c(4,6)]
prop_table <- matrix(c(prop_table$n[1],prop_table$n[2],prop_table$n_not[1],prop_table$n_not[2]),ncol=2)
rownames(prop_table) <- c("lower","upper")
return(prop_table)
}
#First for positives:
pos_table <- create_table(positives)
colnames(prop_table) <- c("pos","not pos")
prop.test(pos_table)
#Now for negatives
neg_table <- create_table(negatives)
colnames(prop_table) <- c("negative","not negative")
prop.test(neg_table)
